server.port=8085
##Jpa配置
spring.jpa.database=mysql
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
# 开启配置
spring.shardingsphere.enabled=true
# 配置真实数据源 ds0,ds1,ds2
spring.shardingsphere.datasource.names=ds0,ds1
spring.shardingsphere.datasource.common.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.common.driver-class-name=com.mysql.jdbc.Driver
# 配置第 1 个数据源
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/database0?characterEncoding=utf8&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456
# 配置第 2 个数据源
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/database1?characterEncoding=utf8&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456
# 配置第 3 个数据源
spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/database1?characterEncoding=utf8&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=123456
## 默认策略
#spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=id
#spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=database_inline
## 配置 主从关系 , 用于读写分离操作
#spring.shardingsphere.rules.sharding.master-slave-rules.ms0.master-data-source-name=ds0
#spring.shardingsphere.rules.sharding.master-slave-rules.ms0.slave-data-source-names=ds2
## 配置 负载均衡, 策略：随机
#spring.shardingsphere.rules.sharding.master-slave-rules.ms0.load-balance-algorithm-type=RANDOM
## 配置 t_user 表规则
#spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=ds$->{0..2}.t_user_$->{1..2}
## 配置 t_user 分库策略
#spring.shardingsphere.rules.sharding.tables.t_user.database-strategy.inline.sharding-column=id
#spring.shardingsphere.rules.sharding.tables.t_user.database-strategy.inline.algorithm-expression=ds$->{id % 2}
## 配置 t_user 分表策略
#spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.inline.sharding-column=id
#spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user_$->{id % 2}
## 配置 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables=area
## 配置 t_user 分片策略
#spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=ds$->{id % 2}
#spring.shardingsphere.rules.sharding.sharding-algorithms.table-inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.table-inline.props.algorithm-expression=t_user_$->{id % 2}
##key generate strategy configuration
#spring.shardingsphere.rules.sharding.tables.t_user.key-generate-strategy.column=id
#spring.shardingsphere.rules.sharding.tables.t_user.key-generate-strategy.key-generator-name=snowflake
##key generators configuration
#spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
#spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=512
#logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSSo
# 官方配置
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=database_inline
spring.shardingsphere.rules.sharding.binding-tables=t_order
spring.shardingsphere.rules.sharding.broadcast-tables=t_address
# t_order 相关配置  =================================
# ds$->{0..1}.t_order
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=order_id
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=snowflake
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.inline.sharding-column=order_id
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ds$->{id % 2}
# t_order_item 相关配置  =================================
# ds$->{0..1}.t_order
#spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item
#spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column=order_item_id
#spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name=snowflake
# database-inline
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
# ds$->{user_id % 2+1}
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=ds$->{0}
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=123


